name: crewai

services:
  # PostgreSQL database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crewai}
      POSTGRES_USER: ${POSTGRES_USER:-crewai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - crewai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crewai} -d ${POSTGRES_DB:-crewai}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
  # Redis for caching and queue backend
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - crewai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
  # Main CrewAI Backend Application
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
      args:
        PYTHON_VERSION: "3.11"
    container_name: backend
    environment:
      # Docker environment flag for validation
      DOCKER_ENV: "true"
      
      # Database configuration
      POSTGRES_DB: ${POSTGRES_DB:-crewai}
      POSTGRES_USER: ${POSTGRES_USER:-crewai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Application configuration
      PROJECT_NAME: "CrewAI Backend"
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
      
      # Performance
      UVICORN_WORKERS: ${UVICORN_WORKERS:-4}
      UVICORN_MAX_REQUESTS: ${UVICORN_MAX_REQUESTS:-10000}
      UVICORN_MAX_REQUESTS_JITTER: ${UVICORN_MAX_REQUESTS_JITTER:-1000}
    
    ports:
      - "${APP_PORT:-8000}:8000"
    
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    
    networks:
      - crewai-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
        labels: "service=crewai-app"

  # Celery Workers for background task processing
  celery-worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
      args:
        PYTHON_VERSION: "3.11"
    container_name: celery-worker
    command: [
      "/opt/venv/bin/celery", "-A", "app.task_queue.task_queue", "worker", 
      "--loglevel=info", "--concurrency=2",
      "--queues=crew_execution,retry,default", "--max-tasks-per-child=1000"
      ]
    
    environment:
      # Docker environment flag for validation
      DOCKER_ENV: "true"
      
      # Database configuration
      POSTGRES_DB: ${POSTGRES_DB:-crewai}
      POSTGRES_USER: ${POSTGRES_USER:-crewai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Application configuration
      PROJECT_NAME: "CrewAI Backend"
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
    volumes:
      - app_logs:/app/logs
      - celery_data:/app/data
    
    networks:
      - crewai-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/opt/venv/bin/celery", "-A", "app.task_queue.task_queue", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    restart: unless-stopped
    
    security_opt:
      - no-new-privileges:true
    deploy:
      replicas: ${CELERY_WORKER_REPLICAS:-1}
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
        labels: "service=celery-worker"
  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
      args:
        PYTHON_VERSION: "3.11"
    container_name: celery-beat
    command: [
      "/opt/venv/bin/celery", "-A", "app.task_queue.task_queue", "beat", 
      "--loglevel=info", "--pidfile=/tmp/celerybeat.pid"
    ]
    
    environment:
      # Docker environment flag for validation
      DOCKER_ENV: "true"
      
      # Database configuration
      POSTGRES_DB: ${POSTGRES_DB:-crewai}
      POSTGRES_USER: ${POSTGRES_USER:-crewai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: ${REDIS_PASSWORD}
        # Application configuration
      PROJECT_NAME: "CrewAI Backend"
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}

    volumes:
      - app_logs:/app/logs
      - celery_beat_data:/app/data

    networks:
      - crewai-network

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    restart: unless-stopped

    security_opt:
      - no-new-privileges:true

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'        
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"      
      options:
        max-size: "50m"        
        max-file: "3"        
    labels:
      service: "celery-beat"
          # Flower for Celery monitoring
  flower:
    image: mher/flower:2.0.1
    container_name: flower
    command: >
      celery 
      --broker=redis://:${REDIS_PASSWORD}@redis:6379/0
      flower
      --port=5555
      --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD}
      --persistent=true
      --db=/data/flower
      --url_prefix=
      --inspect_timeout=10000
      --tasks_columns=name,uuid,state,args,kwargs,result,received,started,runtime,worker
    environment:
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/0
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - crewai-network
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  celery_data:
    driver: local
  celery_beat_data:
    driver: local

networks:
  crewai-network:
    driver: bridge
    name: crewai-network
    ipam:
      config:
        - subnet: 172.20.0.0/16 